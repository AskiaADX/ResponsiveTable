{%
Dim controlAlign
If (CurrentADC.PropValue("controlAlign") = "center" ) Then
    controlAlign = "0 auto"
ElseIf (CurrentADC.PropValue("controlAlign") = "right" ) Then
    controlAlign = "0 0 0 auto"
Else
    controlAlign = "0 auto 0 0"
EndIf
Dim counterHeader = 1
Dim maxResponsesOnIteration = CurrentQuestion.ParentLoop.AvailableAnswers[1].Index
Dim countResponsesOnIteration = CurrentQuestion.Iteration(CurrentQuestion.ParentLoop.AvailableAnswers[1].Index).AvailableResponses.Count
Dim arrResponsesOnIteration = CurrentQuestion.Iteration(CurrentQuestion.ParentLoop.AvailableAnswers[1].Index).AvailableResponses.Index
If (CurrentQuestion.ParentLoop.AvailableAnswers.Count > 1) Then
    For counterHeader = 2 To CurrentQuestion.ParentLoop.AvailableAnswers.Count
        arrResponsesOnIteration = arrResponsesOnIteration union CurrentQuestion.Iteration(CurrentQuestion.ParentLoop.AvailableAnswers[counterHeader].Index).AvailableResponses.Index
    Next counterHeader
EndIf
arrResponsesOnIteration = OrderOf(CurrentQuestion.Shortcut) Intersection arrResponsesOnIteration
Dim firstColumnWidth = CurrentADC.PropValue("firstColumnWidth")
Dim firstColumnAlign = CurrentADC.PropValue("firstColumnAlign")
Dim columnsCount = arrResponsesOnIteration.Count
Dim othersColumns = ((100 - firstColumnWidth.ToNumber()) / columnsCount).ToString().ToNumber().Round(1)
Dim responsivePercent = (100 / columnsCount).ToString().ToNumber().Round(1)
Dim borderColour = CurrentADC.PropValue("borderColour")
Dim borderThickness = CurrentADC.PropValue("borderThickness")
Dim borderStyle = CurrentADC.PropValue("borderStyle")
Dim dropShadow = CurrentADC.PropValue("dropShadow")
Dim headBgPrimaryColor = CurrentADC.PropValue("headBgPrimaryColor")
Dim headBgSecondaryColor = CurrentADC.PropValue("headBgSecondaryColor")
Dim oddBgPrimaryColor = CurrentADC.PropValue("oddBgPrimaryColor")
Dim oddBgSecondaryColor = CurrentADC.PropValue("oddBgSecondaryColor")
Dim evenBgPrimaryColor = CurrentADC.PropValue("evenBgPrimaryColor")
Dim evenBgSecondaryColor = CurrentADC.PropValue("evenBgSecondaryColor")
Dim hoverBgPrimaryColor = CurrentADC.PropValue("hoverBgPrimaryColor")
Dim hoverBgSecondaryColor = CurrentADC.PropValue("hoverBgSecondaryColor")
Dim selectedBgPrimaryColor = CurrentADC.PropValue("selectedBgPrimaryColor")
Dim selectedBgSecondaryColor = CurrentADC.PropValue("selectedBgSecondaryColor")
Dim highlightBgPrimaryColor = CurrentADC.PropValue("highlightBgPrimaryColor") 
Dim highlightBgSecondaryColor = CurrentADC.PropValue("highlightBgSecondaryColor")
Dim checkmarkColor = CurrentADC.PropValue("checkmarkColor")
Dim headTextOrientation = CurrentADC.PropValue("headTextOrientation")
%}
#adc_{%= CurrentADC.InstanceId %} {
    max-width: {%= CurrentADC.PropValue("controlWidth") %};
    margin: {%= controlAlign %};
}
#adc_{%= CurrentADC.InstanceId %} .firstColumn, #adc_{%= CurrentADC.InstanceId %} .respLabel {
    width: {%= firstColumnWidth + "%" %};
    text-align: {%= firstColumnAlign %};
}

#adc_{%= CurrentADC.InstanceId %} .othersColumns, #adc_{%= CurrentADC.InstanceId %} .response, #adc_{%= CurrentADC.InstanceId %} .emptyCell {
    width: {%= othersColumns + "%" %};
}
#adc_{%= CurrentADC.InstanceId %} table {
    {% If (borderThickness = "none") Then %}
        border: none;
    {% Else %}
        border: {%= borderThickness %} {%= borderStyle %} rgb({%= borderColour %});
    {% EndIf %}
}
#adc_{%= CurrentADC.InstanceId %} tr {
    {% If (borderThickness = "none") Then %}
        border: none;
    {% Else %}
        border: {%= borderThickness %} {%= borderStyle %} rgb({%= borderColour %});
    {% EndIf %}
}
#adc_{%= CurrentADC.InstanceId %} td {
    {% If (borderThickness = "none") Then %}
        border-top: none;
    {% Else %}
        border-top: {%= borderThickness %} {%= borderStyle %} rgb({%= borderColour %});
    {% EndIf %}
}
{% If (CurrentADC.PropValue("showBorderColumn") = "yes") Then %}
/* if yes border column*/
#adc_{%= CurrentADC.InstanceId %} td, #adc_{%= CurrentADC.InstanceId %} th {
    {% If (borderThickness = "none") Then %}
        border-right: none;
    {% Else %}
        border-right: {%= borderThickness %} {%= borderStyle %} rgb({%= borderColour %});
    {% EndIf %}
}
#adc_{%= CurrentADC.InstanceId %} td:last-child, #adc_{%= CurrentADC.InstanceId %} th:last-child {
    border-right: 0;
}
{% EndIf %}
#adc_{%= CurrentADC.InstanceId %} table {
    {% If (dropShadow = "yes") Then %}
    box-shadow: 0px 2px 4px rgba(0,0,0,.2);
    {% EndIf %}
    border-radius: {%= CurrentADC.PropValue("borderRadius") %};
}
#adc_{%= CurrentADC.InstanceId %} th:first-child {
    border-top-left-radius: {%= CurrentADC.PropValue("borderRadius") %};
}
#adc_{%= CurrentADC.InstanceId %} th:last-child {
    border-top-right-radius: {%= CurrentADC.PropValue("borderRadius") %};
}
#adc_{%= CurrentADC.InstanceId %} tr:last-child td:first-child {
    border-bottom-left-radius: {%= CurrentADC.PropValue("borderRadius") %};
}
#adc_{%= CurrentADC.InstanceId %} tr:last-child td:last-child {
    border-bottom-right-radius: {%= CurrentADC.PropValue("borderRadius") %};
}
{% If (CurrentADC.PropValue("showHeader") = "no") Then %}
#adc_{%= CurrentADC.InstanceId %} tbody tr:first-child td:first-child {
    border-top-left-radius: {%= CurrentADC.PropValue("borderRadius") %};
}
#adc_{%= CurrentADC.InstanceId %} tbody tr:first-child td:last-child {
    border-top-right-radius: {%= CurrentADC.PropValue("borderRadius") %};
}
{% EndIf %}

/* Tr odd style */
#adc_{%= CurrentADC.InstanceId %} tr {
    background-color: rgba({%= oddBgPrimaryColor %},1.0);
    color: rgba({%= CurrentADC.PropValue("oddFontColor") %},1.0);
    /*transition: all ease-in-out .2s;*/
}
#adc_{%= CurrentADC.InstanceId %} tr .items {
    color: rgba({%= CurrentADC.PropValue("oddFontColor") %},1.0);
    /*transition: all ease-in-out .2s;*/
}
#adc_{%= CurrentADC.InstanceId %} tr label {
    color: rgba({%= CurrentADC.PropValue("oddFontColor") %},1.0);
}
/* Tr even style */
#adc_{%= CurrentADC.InstanceId %} tr:nth-child(even) {
    background-color: rgba({%= evenBgPrimaryColor %},1.0);
    color: rgba({%= CurrentADC.PropValue("evenFontColor") %},1.0);
    /*transition: all ease-in-out .2s;*/
}
#adc_{%= CurrentADC.InstanceId %} tr:nth-child(even) label {
    color: rgba({%= CurrentADC.PropValue("evenFontColor") %},1.0);
}
/* Hover style - if show hightlight row on hover */
#adc_{%= CurrentADC.InstanceId %} tr:hover{
    {% If (CurrentADC.PropValue("hightlightRowOnHover") = "yes") Then %}
    background-color: rgba({%= highlightBgPrimaryColor %},1.0);
    color: rgba({%= CurrentADC.PropValue("highlightFontColor") %},1.0);
    {% EndIf %}
}
{% If ((Browser.Support("touch") = False) and (Browser.Support("javascript"))) Then %}
#adc_{%= CurrentADC.InstanceId %} .response:hover {
    background-color: rgba({%= hoverBgPrimaryColor.ToRGB() %},.1);
    color: rgba({%= CurrentADC.PropValue("hoverFontColor") %},1.0);
}
#adc_{%= CurrentADC.InstanceId %} label:hover {
    color: rgba({%= CurrentADC.PropValue("hoverFontColor") %},1.0);
}
{% EndIf %}
/* Selected style */
#adc_{%= CurrentADC.InstanceId %} .selected, #adc_{%= CurrentADC.InstanceId %} .selected:hover {
    background-color: rgba({%= selectedBgPrimaryColor %},1.0);
    color: rgba({%= CurrentADC.PropValue("selectedFontColor") %},1.0) !important;
    /*transition: all ease-in-out .2s;*/
}
#adc_{%= CurrentADC.InstanceId %} .selected label, #adc_{%= CurrentADC.InstanceId %} .selected label:hover {
    color: rgba({%= CurrentADC.PropValue("selectedFontColor") %},1.0) !important;
}
/* Head style */
#adc_{%= CurrentADC.InstanceId %} th, #adc_{%= CurrentADC.InstanceId %} th:hover {
    background-color: rgba({%= headBgPrimaryColor %},1.0);
    color: rgba({%= CurrentADC.PropValue("headFontColor") %},1.0);
}
{% If (CurrentADC.PropValue("useHeaderStyleFirstColumn") = "yes") Then %}
#adc_{%= CurrentADC.InstanceId %} tr .respLabel, #adc_{%= CurrentADC.InstanceId %} tr .respLabel .items {
    background-color: rgba({%= headBgPrimaryColor %},1.0);
    color: rgba({%= CurrentADC.PropValue("headFontColor") %},1.0);
}
{% EndIf %}
#adc_{%= CurrentADC.InstanceId %} th .head {
    padding: 5px;
    text-align: {%= CurrentADC.PropValue("headerRowAlign") %};
}
{% If (CurrentADC.PropValue("headTextOrientation") = "vertical") Then %} 
	#adc_{%= CurrentADC.InstanceId %} th .head:last-child {
    writing-mode:tb-rl;   
    height: max-content;
    max-height: 200px;
}
{% EndIf %}
#adc_{%= CurrentADC.InstanceId %} td {
    padding: 10px 20px 10px 10px;
    text-align: {%= CurrentADC.PropValue("headerRowAlign") %};
}
#adc_{%= CurrentADC.InstanceId %} .response {
    {% If ((CurrentADC.PropValue("showImagesZoom") = "1") and (CurrentADC.PropValue("responsiveDirection") = "horizontal")) Then %}
    padding: 10px 0 10px 10px;
    {% Else %}
    padding: 10px;
    {% EndIf %}
    position: relative;
}

#adc_{%= CurrentADC.InstanceId %} th, #adc_{%= CurrentADC.InstanceId %} .response {
    font-size: {%= CurrentADC.PropValue("headerRowFontSize") %};
}
#adc_{%= CurrentADC.InstanceId %} th {
    vertical-align: {%= CurrentADC.PropValue("headerRowVerticalAlign") %};
}
#adc_{%= CurrentADC.InstanceId %} .response {
    {% If (CurrentADC.PropValue("showHeader") = "no") Then %}
    vertical-align: {%= CurrentADC.PropValue("headerRowVerticalAlign") %};
    {% Else %}
    vertical-align: middle;
    {% EndIf %}
}

#adc_{%= CurrentADC.InstanceId %} .respLabel {
    font-size: {%= CurrentADC.PropValue("firstColumnFontSize") %};
    text-align: {%= firstColumnAlign %};
}
{% If (CurrentADC.PropValue("forceLoopImagesWidth") = "1" ) Then %}
#adc_{%= CurrentADC.InstanceId %} .respLabel img {
    width: 100%;
    max-width: {%:= CurrentADC.PropValue("maxLoopImagesWidth") %};
}
{% EndIf %}
{% If (CurrentADC.PropValue("showHeader") = "yes") Then %}
#adc_{%= CurrentADC.InstanceId %} label.responsesitems {
    display: none;
}
{% EndIf %}
{% If (CurrentADC.PropValue("showHeader") = "no") Then %}
#adc_{%= CurrentADC.InstanceId %} label.responsesitems {
    display: inline-block;
}
{% EndIf %}
#adc_{%= CurrentADC.InstanceId %} .hiddens, #adc_{%= CurrentADC.InstanceId %} .respLabel .items.hiddens {
    display: none;
}
#adc_{%= CurrentADC.InstanceId %} .responsesitems img {
      {% If (CurrentADC.PropValue("forceImagesWidth") = "1" ) Then %}
	  width: 100%;
      max-width: {%:= CurrentADC.PropValue("maxImagesWidth") %};
      {% EndIf %}
      clear: both;
}
{% If (CurrentADC.PropValue("showLoopImagesZoom") = "1") Then %}
#adc_{%= CurrentADC.InstanceId %} .head.padright {
    padding-right: 20px;
}
{% EndIf %}
{% If (CurrentADC.PropValue("showImagesZoom") = "1") Then %}
#adc_{%= CurrentADC.InstanceId %} label.padright {
    padding-right: 20px;
}
{% EndIf %}
{% If (CurrentADC.PropValue("showHeader") = "no") Then %}
#adc_{%= CurrentADC.InstanceId %} thead tr {
    display: none;
}
#adc_{%= CurrentADC.InstanceId %} table {
    border-top: none;
}
#adc_{%= CurrentADC.InstanceId %} .response input, #adc_{%= CurrentADC.InstanceId %} .response label.askia-radio, #adc_{%= CurrentADC.InstanceId %} .response label.askia-checkbox {
        display: none;
}
{% EndIf %}
#adc_{%= CurrentADC.InstanceId %} .imgZoom {
    right: 5px;
}
{% If (CurrentADC.PropValue("accordion") = "1") Then %}
#adc_{%= CurrentADC.InstanceId %} .respLabel .respaccordion { 
    display: none;
    font-size: {%= Theme.SmallFS %};
    font-style: italic;
}
{% EndIf %}

#adc_{%= CurrentADC.InstanceId %} .emptyCell { 
    display: table-cell;
    cursor: auto;
}

@media screen and (max-width: {%= CurrentADC.PropValue("responsiveWidth") %}) {
    #adc_{%= CurrentADC.InstanceId %} .emptyCell { 
    	display: none;
	}

    #adc_{%= CurrentADC.InstanceId %} tr:nth-child(even), #adc_{%= CurrentADC.InstanceId %} tr, #adc_{%= CurrentADC.InstanceId %} tr:hover {
        background-color: rgba({%= oddBgPrimaryColor %},1.0);
        color: rgba({%= CurrentADC.PropValue("oddFontColor") %},1.0);
    }
    #adc_{%= CurrentADC.InstanceId %} tr:nth-child(even) label, #adc_{%= CurrentADC.InstanceId %} tr label, #adc_{%= CurrentADC.InstanceId %} tr label:hover {
        color: rgba({%= CurrentADC.PropValue("oddFontColor") %},1.0);
    }
	{% If ((Browser.Support("touch") = False) and (Browser.Support("javascript"))) Then %}
    #adc_{%= CurrentADC.InstanceId %} .response:hover {
        background-color: rgba({%= hoverBgPrimaryColor.ToRGB() %},.1);
        color: rgba({%= CurrentADC.PropValue("hoverFontColor") %},1.0);
    }
    #adc_{%= CurrentADC.InstanceId %} label:hover {
        color: rgba({%= CurrentADC.PropValue("hoverFontColor") %},1.0);
    }
    {% EndIf %}
    #adc_{%= CurrentADC.InstanceId %} .selected, #adc_{%= CurrentADC.InstanceId %} .selected:hover {
        background-color: rgba({%= selectedBgPrimaryColor %},1.0);
        color: rgba({%= CurrentADC.PropValue("selectedFontColor") %},1.0) !important;
    }
    #adc_{%= CurrentADC.InstanceId %} .selected label, #adc_{%= CurrentADC.InstanceId %} .selected label:hover {
        color: rgba({%= CurrentADC.PropValue("selectedFontColor") %},1.0) !important;
    }

    #adc_{%= CurrentADC.InstanceId %} .respLabel, #adc_{%= CurrentADC.InstanceId %} .respLabel:hover {
        background-color: rgba({%= headBgPrimaryColor %},1.0);
        color: rgba({%= CurrentADC.PropValue("headFontColor") %},1.0);
        text-align: {%= CurrentADC.PropValue("responsiveHeaderAlign") %};
        font-size: {%= CurrentADC.PropValue("responsiveHeaderFontSize") %};
    }
    #adc_{%= CurrentADC.InstanceId %} .respLabel label, #adc_{%= CurrentADC.InstanceId %} .respLabel label:hover {
        color: rgba({%= CurrentADC.PropValue("headFontColor") %},1.0);
        font-size: {%= CurrentADC.PropValue("responsiveHeaderFontSize") %};
    }
    
    #adc_{%= CurrentADC.InstanceId %} .response, #adc_{%= CurrentADC.InstanceId %} .respLabel {
        {% If (borderThickness = "none") Then %}
        border-bottom: none;
    	{% Else %}
        border-bottom: {%= borderThickness %} {%= borderStyle %} rgb({%= borderColour %});
    	{% EndIf %}
    }
    #adc_{%= CurrentADC.InstanceId %} td {
		padding: 0;
        border-top: none;
    }
	#adc_{%= CurrentADC.InstanceId %} .respLabel .items {
		display: block;
		margin: 0 5px 5px 5px;
        {% If (CurrentADC.PropValue("accordion") = "1") Then %}
		padding: 5px 20px 0 0;
    	{% Else %}
		padding: 5px 0 0 0;
    	{% EndIf %}
	}
    {% If (CurrentADC.PropValue("accordion") = "1") Then %}
    #adc_{%= CurrentADC.InstanceId %} .respLabel .respaccordion { 
        display: block;
        margin: 0 5px 5px 5px;
        padding: 5px 20px 5px 0;
    }
    {% EndIf %}
    #adc_{%= CurrentADC.InstanceId %} td, #adc_{%= CurrentADC.InstanceId %} th {
        border-right: none;
    }
    #adc_{%= CurrentADC.InstanceId %} .response:last-child {
        {% If (CurrentADC.PropValue("responsiveDirection") = "vertical") Then %}
        border-bottom: none;
    	{% Else %}
        border-bottom: {%= borderThickness %} {%= borderStyle %} rgb({%= borderColour %});
    	{% EndIf %}
    }
    #adc_{%= CurrentADC.InstanceId %} tr {
        {% If (dropShadow = "yes") Then %}
    	box-shadow: 0px 2px 4px rgba(0,0,0,.2);
    	{% EndIf %}
    }

    #adc_{%= CurrentADC.InstanceId %} .response {
        text-align: {%= CurrentADC.PropValue("responsiveTextAlign") %};
        font-size: {%= CurrentADC.PropValue("responsiveFontSize") %};
        overflow: hidden;
        width: 97%;
        vertical-align: {%= CurrentADC.PropValue("responsiveVerticalAlign") %};
        {% If (CurrentADC.PropValue("responsiveDirection") = "horizontal") Then %}
        display: table-cell;
        width: 1%;
    	{% EndIf %}
        -webkit-transition: display .2s ease-in-out;
        -moz-transition: display .2s ease-in-out;
        transition: display .2s ease-in-out;
    }

    #adc_{%= CurrentADC.InstanceId %} tr {
        border-radius: {%= CurrentADC.PropValue("borderRadius") %};
    }
	/* if javascript */
    #adc_{%= CurrentADC.InstanceId %} .response input, #adc_{%= CurrentADC.InstanceId %} .response label.askia-radio, #adc_{%= CurrentADC.InstanceId %} .response label.askia-checkbox {
        {% If (CurrentADC.PropValue("hideInputs") = "yes") Then %}
        display: none;
        {% EndIf %}
    }

    #adc_{%= CurrentADC.InstanceId %} table {
        border: 0;
        box-shadow: none;
    }

    #adc_{%= CurrentADC.InstanceId %} thead {
        display: none;
    }
    #adc_{%= CurrentADC.InstanceId %} tr {
        margin-bottom: 10px;
        display: block;
        overflow: hidden;
    }
    #adc_{%= CurrentADC.InstanceId %} tr:last-child td:first-child {
        border-bottom-left-radius: 0;
    }
    #adc_{%= CurrentADC.InstanceId %} td, #adc_{%= CurrentADC.InstanceId %} td:hover {
        cursor: pointer;
    }
    #adc_{%= CurrentADC.InstanceId %} .respLabel, #adc_{%= CurrentADC.InstanceId %} .respLabel:hover {
        width: 100%;
        cursor: auto;
        {% If ((CurrentADC.PropValue("responsiveHeaderAlign") = "center") or (CurrentADC.PropValue("responsiveHeaderAlign") = "right")) Then %}
        padding-left: 0;
        {% EndIf %}
    }
    #adc_{%= CurrentADC.InstanceId %} td, #adc_{%= CurrentADC.InstanceId %} label.responsesitems {
        display: block;
    }
    {% If ((CurrentADC.PropValue("imagesPositionResponsive") = "left") or (CurrentADC.PropValue("imagesPositionResponsive") = "right")) Then %}
    #adc_{%= CurrentADC.InstanceId %} .responsesitems img {
         float: {%= CurrentADC.PropValue("imagesPositionResponsive") %};
    }
    {% EndIf %}
    {% If (CurrentADC.PropValue("imagesPositionResponsive") = "right") Then %}
    #adc_{%= CurrentADC.InstanceId %} .responsesitems img {
         padding-right: 20px;
    }
    {% EndIf %}
    #adc_{%= CurrentADC.InstanceId %} td {
         position: relative;
    }
    /*#adc_{%= CurrentADC.InstanceId %} .respLabel .imgZoom {
    	right: 25px;
	}*/
    {% If (CurrentADC.PropValue("responsiveDirection") = "vertical") Then %}
    /*#adc_{%= CurrentADC.InstanceId %} .imgZoom {
    	right: 15px;
	}*/
    #adc_{%= CurrentADC.InstanceId %} .response .imgZoom {
    	bottom: 5px;
        right: 25px;
	}
    {% EndIf %}
    
    {% If (CurrentADC.PropValue("accordion") = "1") Then %}
   #adc_{%= CurrentADC.InstanceId %} .askiadisplay {
        width: 100%;
        height: 100%;
        display: block;
        cursor: pointer;
        user-select: none;
    }
    
    #adc_{%= CurrentADC.InstanceId %} .askiadisplay:before {
        width: 6px;
        height: 6px;
        border-right: 2px solid #8c7456;
        border-bottom: 2px solid #8c7456;
        right: 10px;
        top: 11px;
        position: absolute;
        content: " ";
        transform: rotate(-45deg);
        -webkit-transition: all .2s ease-in-out;
        -moz-transition: all .2s ease-in-out;
        transition: all .2s ease-in-out;
    }
    
    #adc_{%= CurrentADC.InstanceId %} .askiadisplay.active:before {
        transform: rotate(45deg);
        -webkit-transition: all .2s ease-in-out;
        -moz-transition: all .2s ease-in-out;
        transition: all .2s ease-in-out;   
    }
    #adc_{%= CurrentADC.InstanceId %} tr .respLabel .items {
        background-color: transparent;
    	color: rgba({%= CurrentADC.PropValue("headFontColor") %},1.0);
}
    }
    #adc_{%= CurrentADC.InstanceId %} .checkmark {
        background-color: rgba({%= checkmarkColor.ToRGB() %},.2);
    }
    
    #adc_{%= CurrentADC.InstanceId %} .checkmark:before{
        border-right: 2px solid rgb({%= checkmarkColor %});
        border-bottom: 2px solid rgb({%= checkmarkColor %});
        right: 10px;
        top: 6px;
        position: absolute;
        content: " ";
        -webkit-transition: all .2s ease-in-out;
        -moz-transition: all .2s ease-in-out;
        transition: all .2s ease-in-out;
        width: 6px;
        height: 12px;
        transform: rotate(45deg);
    }
    {% EndIf %}
}